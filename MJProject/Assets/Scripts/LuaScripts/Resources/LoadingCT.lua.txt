LoadingCT = {}
local Enum = require "Enum"
local FairyGUI = require "FairyGUI"
local ClickEvent = require "ClickEvent"
ClickEvent.self = self
local AssetManager = require "AssetManager"
local util = require "xlua.util"
local _main_ui_sence = "FairyMainUI"
local _loading_sence = "LoadingSence"
local _play_sence = "PlaySence"
local _tosence_name = nil

LoadingCT._copyed = false

local function AsyncYieldReturn(to_yield, cb)
    self:YieldAndCallback(to_yield, cb)
end
local yield_return = util.async_to_sync(AsyncYieldReturn)

function awake( ... ) 
	-- body
end

function start()
	ClickEvent.Awake()
	ClickEvent.uiPanel.ui:GetChild("LoadingBar").visible = false
	-- body
	--UIConfig.defaultFont = "MJFont"
	if CS.LuaCommon.isAndroid and CS.LuaCommon.isAndroid == true then
		LoadingCT.CopyAndroidRes()
	end
	if not LoadingCT._copyed and CS.LuaCommon.isAndroid then
		return
	end
	--[[
	if not LoadingCT._copyed and CS.LuaCommon.isIos then
		return
	end
	--]]
	if Player and Player._tosence_name then
		LoadingCT.ToSence(Player._tosence_name)
	else
		LoadingCT.ToSence(_main_ui_sence)
	end
end

function update( ... )
	-- body
	
end

function LoadingCT.CopyAndroidRes()
	-- body
	--android load
	if LoadingCT._copyed then return end
	LoadingCT._copyed = true
	local co = coroutine.create(function()
		local folder = CS.System.IO.FileInfo(CS.UnityEngine.Application.persistentDataPath.."/MyAssets.upk")
		if not folder.Exists then
			local www = CS.UnityEngine.WWW(CS.LuaCommon.resultPath.."MyAssets.upk")
			yield_return(www)
			if not www.error then
				local path = CS.UnityEngine.Application.persistentDataPath
				if not CS.System.IO.Directory:Exists(path)then
					CS.System.IO.Directory.CreateDirectory(path)
				end
				CS.AssetsHandle.CreateNewAsset(www.bytes,path.."/MyAssets.upk")
		        CS.AssetsHandle.UnPackAssetFolder(path.."/MyAssets.upk",path.."/")
		        --[[
				local fs = CS.System.IO.FileStream(path.."/Asset.upk", CS.System.IO.FileMode.Create)
				fs:Write(www.bytes,0,1024)
				fs:Flush()
		        fs:Close()
		        fs:Dispose()
		        --]]
			else
				CS.UnityEngine.Debug.LogWarning('error:'..www.error)
			end
			LoadingCT.ToSence(_main_ui_sence)
		else
			CS.UnityEngine.Debug.LogWarning("path error")
		end
    end)
    coroutine.resume(co)
	return _copyed
end

function LoadingCT.WaitForSeconds(seconds)
	-- body
	local co = coroutine.create(function()
    yield_return(CS.UnityEngine.WaitForSeconds(seconds))
	end)
	coroutine.resume(co)
end

function LoadingCT.ToSence(senceName)
	-- body
	local co = coroutine.create(function()
		--yield_return(CS.UnityEngine.WaitForSeconds(3))
	    yield_return(CS.UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(senceName))
	end)
	coroutine.resume(co)
end


return LoadingCT