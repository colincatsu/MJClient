LoadingSence = {}
local FairyGUI = require "FairyGUI"
local util = require "xlua.util"
local function AsyncYieldReturn(to_yield, cb)
    self:YieldAndCallback(to_yield, cb)
end
local yield_return = util.async_to_sync(AsyncYieldReturn)
local WeChatPlatform = CS.Platform.Instance
local rapidjson = require "rapidjson"

local dataPath = ""
--[[
local HotFixUrl = "http://api.cloudbm.wang/game/download"
local Md5Url = "http://api.cloudbm.wang/game/hotupdate"
local httpUrlToken = "http://api.cloudbm.wang/auth/jwt"
--]]
local HotFixUrl = "http://testapi.cloudbm.wang/game/download"
local Md5Url = "http://testapi.cloudbm.wang/game/hotupdate"
local httpUrlToken = "http://testapi.cloudbm.wang/auth/jwt"

local httpAppID = "snve1zlao934hhh323"
local httpAppSecret = "fiejfAJG%139*&sdfjNMJQA"

local httpToken = ""

local currentVersion = "24"

--local currentMd5 = "9af6ad141df0f43fa4222acfa69e9dcb"--版本md5
--local isReloadData = false

local localVersion = ""
local serveVersion = ""

local loadingUI = nil
local loadingBar = nil
local downloadProgress = nil
local downloadNumber = nil
local downloadSize = 0
local hotPackageTable = nil
local tableLength = 0
local tableIndex = 0

local www = nil

function awake()
	-- body
	UIConfig.defaultFont = "MJFont"
	loadingUI = CS.UnityEngine.GameObject.Find("UIPanel"):GetComponent("UIPanel").ui
	--loadingUI:GetChild("InformNoHorn").visible = false
	loadingBar = loadingUI:GetChild("LoadingBar")
	loadingBar.value = 0
	loadingBar:GetChild("DownloadSpeed").visible = false
	loadingBar:GetChild("n5").visible = false
	downloadProgress = loadingBar:GetChild("Schedule")
	downloadNumber = loadingBar:GetChild("Files")
	--downloadProgress.visible = false
	CS.UnityEngine.Application.targetFrameRate = 30
end

function start()
	-- body
	dataPath = CS.UnityEngine.Application.persistentDataPath.."/"
	if not Player then
		--local md5
		local hotfixVersion = io.open(dataPath.."hotfixVersion.txt")
		if not hotfixVersion then
			--localVersion，数据里没有version
			os.remove(dataPath.."MyAssets.upk")
			local mFile = io.open(dataPath.."hotfixVersion.txt" ,"w")
	        mFile:write(currentVersion)
	        mFile:close()
	        localVersion = currentVersion
		else
			localVersion = hotfixVersion:read "*a"
	        hotfixVersion:close()
	        if localVersion < currentVersion then
	        	localVersion = currentVersion
	        	os.remove(dataPath.."MyAssets.upk")
	        end
		end
		--serveVersion
		LoadingSence.GetServeVersion()
	else
		--LoadingSence.BeginGame()
	end
end

function update( ... )
	-- body
	if www then
		LoadingSence.SetLoadingBar(www.progress)
		downloadProgress.text = tostring(math.ceil(downloadSize * www.progress/1024)).."kb/"..tostring(math.ceil(downloadSize/1024)).."kb"
	end
end

function LoadingSence.SetLoadingBar(progress)
	-- body
	local progessInt = math.ceil(progress * 100)
	loadingBar.value = progessInt
end

function LoadingSence.SetLoadedFilesNum(currentIndex)
	-- body
	downloadNumber.text = tostring(currentIndex).."/"..tostring(tableLength)
end

function LoadingSence.DownloadData()
	-- body
	tableIndex = tableIndex + 1
	if tableIndex > tableLength then
		return
	end
    LoadingSence.SetLoadedFilesNum(tableIndex)
	os.remove(dataPath.."hotfixVersion.txt")
	os.remove(dataPath.."MyAssets.upk")
	serveVersion = tostring(hotPackageTable[tableIndex].version)
	downloadSize = hotPackageTable[tableIndex].size
	local folder = CS.System.IO.FileInfo(CS.UnityEngine.Application.persistentDataPath.."/MyAssets.upk")
	if not folder.Exists then
		--isReloadData = true
		local co = coroutine.create(function()
			local header = {}
			header.jwt = httpToken
			header["User-Agent"] = "BH-MJProject1.0.2.0916"
			www = CS.UnityEngine.WWW(HotFixUrl.."?ver="..serveVersion, rapidjson.encode(header.jwt), header)
			yield_return(www)
			if not www.error then
				local path = CS.UnityEngine.Application.persistentDataPath
				if not CS.System.IO.Directory:Exists(path)then
					CS.System.IO.Directory.CreateDirectory(path)
				end

				CS.AssetsHandle.CreateNewAsset(www.bytes,path.."/MyAssets.upk")
		        CS.AssetsHandle.UnPackAssetFolder(path.."/MyAssets.upk",path.."/")
				local mFile = io.open(dataPath.."hotfixVersion.txt" ,"w")
		        mFile:write(serveVersion)
		        mFile:close()
		        localVersion = serveVersion
		        if tonumber(localVersion) >= hotPackageTable[tableLength].version then
					LoadingSence.BeginGame()
				else
			        LoadingSence.DownloadData()
				end
		        --LoadingSence.BeginGame()
			else
				CS.UnityEngine.Debug.LogWarning('error:'..www.error)
			end
	    end)
	    coroutine.resume(co)
	else
		CS.UnityEngine.Debug.LogWarning("path error")
		os.remove(dataPath.."MyAssets.upk")
	end
end

function LoadingSence.CopyAndroidRes()
	-- body
	--android load
	local needCopy = true
	local folder = CS.System.IO.FileInfo(CS.UnityEngine.Application.persistentDataPath.."/MyAssets.upk")
	if not folder.Exists then
		--isReloadData = true
		local co = coroutine.create(function()
			www = CS.UnityEngine.WWW(CS.LuaCommon.resultPath.."MyAssets.upk")
			yield_return(www)
			if not www.error then
				local path = CS.UnityEngine.Application.persistentDataPath
				if not CS.System.IO.Directory:Exists(path)then
					CS.System.IO.Directory.CreateDirectory(path)
				end
				
				CS.AssetsHandle.CreateNewAsset(www.bytes,path.."/MyAssets.upk")
		        CS.AssetsHandle.UnPackAssetFolder(path.."/MyAssets.upk",path.."/")
		        if tableLength > 0 and tonumber(localVersion) < hotPackageTable[tableLength].version then
			        LoadingSence.DownloadData()
				else
					LoadingSence.BeginGame()
				end
			else
				CS.UnityEngine.Debug.LogWarning('error:'..www.error)
			end
	    end)
	    coroutine.resume(co)
	else
		CS.UnityEngine.Debug.LogWarning("path error")
		needCopy = false
	end
    return needCopy
end

function LoadingSence.BeginGame( ... )
	-- body
	local LoadingCT = require "LoadingCT"
	LoadingCT.self = self
	LoadingCT.ToSence("FairyMainUI")
end

function LoadingSence.GetServeVersion( ... )
	-- body
	local httpTokenFile = io.open(dataPath.."httpToken.txt")
	httpToken = ""
	if not httpTokenFile then
		LoadingSence.GetHttpToken()
	else
		httpToken = httpTokenFile:read "*a"
        httpTokenFile:close()
		if httpToken ~= "" then
	        LoadingSence.RequestServerVersion()
	    else
	    	LoadingSence.GetHttpToken()
		end
	end
end

function LoadingSence.RandomString( ... )
	-- body
	math.randomseed(os.time())
	local outPut = ""
	for i=1,7 do
		local index = math.random(0,61)
		if index < 10 then
			outPut = outPut..tostring(index)
		elseif index >= 10 and index <= 35 then
			outPut = outPut..string.char(index + 55)
		elseif index >= 36 and index <= 61 then
			outPut = outPut..string.char(index + 61)
		end
	end
	return outPut
end

function LoadingSence.GetHttpToken()
	-- body
	local time = os.time()
	local nonce = LoadingSence.RandomString()
	local sign = WeChatPlatform:GetMd5String("app_id="..httpAppID.."&nonce="..nonce.."&time="..tostring(time).."&"..httpAppSecret)
	local header = {}
	header["User-Agent"] = "BH-MJProject1.0.2.0916"

	local co = coroutine.create(function()
		local wwwToken = CS.UnityEngine.WWW(httpUrlToken.."?app_id="..httpAppID.."&time="..tostring(time).."&nonce="..nonce.."&sign="..sign,rapidjson.encode(header["User-Agent"]),header)
		yield_return(wwwToken)
		if not wwwToken.error then
			local jsonData = rapidjson.decode(wwwToken.text)
			if jsonData.code == 0 then
				httpToken = jsonData.data.jwt
				local path = CS.UnityEngine.Application.persistentDataPath.."/"
				local mFile = io.open(path.."httpToken.txt" ,"w")
		        mFile:write(httpToken)
		        mFile:close()
		        LoadingSence.RequestServerVersion()
			else
				LoadingSence.GetHttpToken()
			end
		else
			CS.UnityEngine.Debug.LogWarning('error:'..wwwToken.error)
			yield_return(CS.UnityEngine.WaitForSeconds(5))
			LoadingSence.GetHttpToken()
		end
    end)
    coroutine.resume(co)
end

function LoadingSence.RequestServerVersion( ... )
	-- body
	local co = coroutine.create(function()
		local header = {}
		header.jwt = httpToken
		header["User-Agent"] = "BH-MJProject1.0.2.0916"
		local www = CS.UnityEngine.WWW(Md5Url.."?ver="..localVersion, rapidjson.encode(header.jwt), header)
		yield_return(www)
		if not www.error then
			print(www.text)
			local jsonData = rapidjson.decode(www.text)
			if jsonData.code == 0 then
				hotPackageTable = jsonData.data.issues
				tableLength = 0
				for k,v in pairs(hotPackageTable) do
					tableLength = tableLength + 1
				end
				LoadingSence.SetLoadedFilesNum(0)
				if tableLength == 0 then
					if LoadingSence.CopyAndroidRes() == false then
						LoadingSence.BeginGame()
					end
					return
				end
				if tableLength > 0 and tonumber(localVersion) == hotPackageTable[tableLength].version then
					if LoadingSence.CopyAndroidRes() == false then
						LoadingSence.BeginGame()
					end
				else
					if LoadingSence.CopyAndroidRes() == false then
				        LoadingSence.DownloadData()
					end
				end
			elseif jsonData.code == 200101 then
				LoadingSence.GetHttpToken()
			else
			end
		else
			CS.UnityEngine.Debug.LogWarning('error:'..www.error)
			yield_return(CS.UnityEngine.WaitForSeconds(5))
			LoadingSence.RequestServerVersion()
		end
    end)
    coroutine.resume(co)
end

return LoadingSence